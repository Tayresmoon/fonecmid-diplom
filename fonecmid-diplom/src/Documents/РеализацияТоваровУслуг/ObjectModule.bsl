
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьНаОснованииЗаказаПокупателя(ДанныеЗаполнения)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗаказПокупателя.Организация КАК Организация,
	               |	ЗаказПокупателя.Контрагент КАК Контрагент,
	               |	ЗаказПокупателя.Договор КАК Договор,
	               |	ЗаказПокупателя.СуммаДокумента КАК СуммаДокумента,
	               |	ЗаказПокупателя.Товары.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Товары,
	               |	ЗаказПокупателя.Услуги.(
	               |		Ссылка КАК Ссылка,
	               |		НомерСтроки КАК НомерСтроки,
	               |		Номенклатура КАК Номенклатура,
	               |		Количество КАК Количество,
	               |		Цена КАК Цена,
	               |		Сумма КАК Сумма
	               |	) КАК Услуги
	               |ИЗ
	               |	Документ.ЗаказПокупателя КАК ЗаказПокупателя
	               |ГДЕ
	               |	ЗаказПокупателя.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	
	ТоварыОснования = Выборка.Товары.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Товары.Добавить(), ТоварыОснования);
	КонецЦикла;
	
	УслугиОснования = Выборка.Услуги.Выбрать();
	Пока ТоварыОснования.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Услуги.Добавить(), УслугиОснования);
	КонецЦикла;
	
	Основание = ДанныеЗаполнения;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)

	Движения.ОбработкаЗаказов.Записывать = Истина;
	Движения.ОстаткиТоваров.Записывать = Истина;
	
	Движение = Движения.ОбработкаЗаказов.Добавить();
	Движение.Период = Дата;
	Движение.Контрагент = Контрагент;
	Движение.Договор = Договор;
	Движение.Заказ = Основание;
	Движение.СуммаОтгрузки = СуммаДокумента;

	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Движение = Движения.ОстаткиТоваров.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Период = Дата;
		Движение.Контрагент = Контрагент;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма = ТекСтрокаТовары.Сумма;
		Движение.Количество = ТекСтрокаТовары.Количество;
	КонецЦикла;

КонецПроцедуры

Процедура ВКМ_ВыполнитьАвтозаполнение() Экспорт
	//<<KoshAU Создание команды "Заполнить" суммами абонентской платы и выполненых работ

	НоменклатураАбонентскаяПлата  = ВКМ_Телеграм.ПолучитьЗначениеКонстанты("ВКМ_НоменклатураАбонентскаяПлата");
	НоменклатураРаботыСпециалиста = ВКМ_Телеграм.ПолучитьЗначениеКонстанты("ВКМ_НоменклатураРаботыСпециалиста");
	
	Если Не ЗначениеЗаполнено(НоменклатураАбонентскаяПлата) Или Не ЗначениеЗаполнено(НоменклатураРаботыСпециалиста) Тогда
		ОбщегоНазначения.СообщитьПользователю("Константы не заполнены",,,ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Услуги.Очистить();
	
	АбонентскаяПлата = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВКМ_СуммаАбонентскойПлаты");
	
	Если АбонентскаяПлата <> 0 Тогда
		СтрокаТабличнойЧасти = Услуги.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = НоменклатураАбонентскаяПлата;
		СтрокаТабличнойЧасти.Количество = 1;
		СтрокаТабличнойЧасти.Цена = АбонентскаяПлата;
		СтрокаТабличнойЧасти.Сумма = АбонентскаяПлата;
	КонецЕсли;
	 
	ВыполненыеРаботы = ВКМ_ПолучитьДанныеВыполненыхРабот();
	
	Если ВыполненыеРаботы.Количество <> 0 И ВыполненыеРаботы.Сумма <> 0 Тогда
		СтрокаТабличнойЧасти = Услуги.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = НоменклатураРаботыСпециалиста; 
		СтрокаТабличнойЧасти.Количество = ВыполненыеРаботы.Количество;
		СтрокаТабличнойЧасти.Сумма = ВыполненыеРаботы.Сумма;
		Если СтрокаТабличнойЧасти.Сумма <> 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЕсли;
	
	СуммаДокумента = Товары.Итог("Сумма") + Услуги.Итог("Сумма");
	
	//>>
КонецПроцедуры 

Функция ВКМ_ПолучитьДанныеВыполненыхРабот()
	//<<KoshAU Создание команды "Заполнить" суммами абонентской платы и выполненых работ
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Количество", 0);
	СтруктураДанных.Вставить("Сумма", 0);
	
	ДатаНачала = НачалоМесяца(Дата);
	ДатаОкончания = КонецМесяца(Дата);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.КоличествоЧасовОборот КАК КоличествоЧасовОборот,
		|	ВКМ_ВыполненныеКлиентуРаботыОбороты.СуммаКОплатеОборот КАК СуммаКОплатеОборот
		|ИЗ
		|	РегистрНакопления.ВКМ_ВыполненныеКлиентуРаботы.Обороты(
		|			&ДатаНачала,
		|			&ДатаОкончания,
		|			,
		|			Клиент = &Клиент
		|				И Договор = &Договор) КАК ВКМ_ВыполненныеКлиентуРаботыОбороты"; 
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", Новый Граница(ДатаОкончания, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Клиент", Контрагент);
	Запрос.УстановитьПараметр("Договор", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать(); 
	
	Пока Выборка.Следующий() Цикл
		СтруктураДанных.Количество = Выборка.КоличествоЧасовОборот;
		СтруктураДанных.Сумма = Выборка.СуммаКОплатеОборот;
	КонецЦикла;
	
	Возврат СтруктураДанных;
	
	//>>
КонецФункции

#КонецОбласти

#КонецЕсли
